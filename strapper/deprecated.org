#+property: header-args:hy :tangle yes

* Rich Traceback

#+begin_src hy
(import rich.traceback)
(.install rich.traceback :show-locals True)
#+end_src

* Imports

#+begin_src hy
(import orjson as json)
(import oreo)
(import os)
#+end_src

** From

#+begin_src hy
(import addict [Dict :as D])
(import bakery [ getconf
                 mkswap
                 mount
                 nix
                 nixos-generate-config
                 nixos-install
                 nixos-rebuild
                 parted
                 rsync
                 sd
                 swapon
                 umount
                 zfs
                 zpool ])
(import functools [partial])
(import pathlib [Path])
(import sys [argv])
#+end_src

*** Coconut

[[https://coconut.readthedocs.io/en/latest/index.html][Coconut]]:

#+begin_src hy
(try (import coconut *)
     (except [ImportError] None))
#+end_src

*** Toolz

[[https://github.com/pytoolz/toolz][Toolz]] and [[https://github.com/pytoolz/cytoolz/][CyToolz]]:

#+begin_src hy
(try (import cytoolz [first])
     (except [ImportError]
             (import toolz [first])))
#+end_src

* Requires

#+begin_src hy
(require hyrule [-> assoc])
#+end_src

* Application Imports

#+begin_src hy
(import click)
#+end_src

* Datasets

#+name: 03a790b2-39f2-40a3-be10-b107c73df509
#+begin_src text
reserved
#+end_src

#+name: f3568bf1-26cf-4d6f-8182-aad00b6a8d69
#+begin_src json
{
    "base": {  },
    "hold": {  },
    "omniverse": {  },
    "<<03a790b2-39f2-40a3-be10-b107c73df509>>": {  },
    "<<username>>": { "datasets": {
            "oreo": {  },
            "sylveon": {  },
            "sylvorg": {  },
            "syvlorg": {  },
            "user": {  },
            "uru": {  }},
        "options": [ "mountpoint=legacy" ]},
    "system": {
        "datasets": {
            "home": { "datasets": { "root": { "mountpoint": "/root" }}},
            "nix": {  },
            "persist": { "datasets": { "root": { "mountpoint": "/persist/root" }}},
            "root": {  },
            "tmp": { "datasets": { "nix": {  }}, "options": [ "sync=disabled" ] }
        },
        "options": [ "mountpoint=legacy" ]
    },
    "virt": {
        "datasets": {
            "docker": {  },
            "kvm": {  },
            "podman": { "datasets": {  }},
            "qemu": {  },
            "vagrant": {  },
            "xen": {  }
        },
        "options": [ "mountpoint=legacy", "refreservation=none" ],
        "mountpoint": "/var/lib"
    }
}
#+end_src

** Update Datasets

#+begin_src hy
(defn update-datasets [ctx [swap 0] [encrypted False] [deduplicated False] [pool False] [root-device None] [reserved-only False]]
      (setv host         ctx.obj.host
            resources    ctx.obj.resources
            snap-dir     [ "snapdir=visible" ]
            extra-copies (+ snap-dir [ "copies=3" ])
            cache        [ "sync=disabled" ]
            ml           "mountpoint=legacy"
            d            "datasets"
            s            "system"
            reserved     "<<03a790b2-39f2-40a3-be10-b107c73df509>>"
            datasets     (D (.loads json (.strip #[[
                                <<f3568bf1-26cf-4d6f-8182-aad00b6a8d69>>
                         ]])))
            primary-user "<<username>>"
            users        (D (.loads json (.strip #[[
                                <<users>>
                         ]])))
            homes        (D (.loads json (.strip #[[
                                <<homes>>
                         ]]))))
      (assoc datasets host (D { "datasets" { "jails" { "datasets" { "base" (dict)}}}
                                     "options" [ ml ]}))
      (for [user (.values users)]
           (assoc (get datasets s d "home" d) user (dict))
           (assoc (get datasets s d "persist" d) user (dict))
           (assoc (get datasets "virt" d "podman" d) user (dict)))
      (if reserved-only
          (.create zfs (+ host "/" reserved) :o "mountpoint=none")
          (with [dnix (.open (+ resources "/datasets.nix") "w")]
                (.write dnix (+ "host: { \n\t\""
                                (or root-device "${host}/system/root")
                                "\" = \"/\";"
                                "\n"))
              (defn recurse [ddict dname droot [mountpoint ""]]
                    (setv recurse/datasets     (.list zfs :r True :o "name" :m/list True :m/ignore-stderr True)
                          recurse/datasets     (cut recurse/datasets 2 (len recurse/datasets))
                          recurse/dataset      (+ droot "/" dname)
                          recurse/real-dataset (.replace recurse/dataset "${host}" host)
                          cloning              (and (!= dname "base")
                                                    (and encrypted deduplicated))
                          prefixes             #("system"
                                                 "system/root"
                                                 "swap"
                                                 "base"
                                                 "omniverse"
                                                 reserved))
                    (if cloning
                        (setv clone-or-create  "clone"
                              snapshot-or-none (+ host "/base@root"))
                        (setv clone-or-create  "create"
                              snapshot-or-none ""))
                    (when (not (in recurse/real-dataset (lfor prefix prefixes (+ host "/" prefix))))
                          (if (setx recurse/mountpoint (.get ddict "mountpoint" ""))
                              (setv mountpoint recurse/mountpoint)
                              (if mountpoint
                                  (setv mountpoint (+ mountpoint "/" dname)
                                        recurse/mountpoint mountpoint)
                                  (do (setv recurse/mountpoint (.removeprefix recurse/dataset (+ "${host}" "/")))
                                      (for [prefix prefixes]
                                           (setv recurse/mountpoint (.removeprefix recurse/mountpoint (+ prefix "/"))))
                                      (setv recurse/mountpoint (+ "/" recurse/mountpoint)))))
                          (if (and (.startswith recurse/real-dataset (+ host "/" primary-user))
                                   (not (= recurse/real-dataset (+ host "/" primary-user))))
                              (.write dnix (+ "\t\""
                                              recurse/dataset
                                              "\" = [ "
                                              (.join " " (gfor user (.keys users) (+ "\"" (get homes user) "/" dname "\"")))
                                              " ];\n"))

                              ;; TODO: What does this do? Mind that this sits in the middle of an if statement.
                              #_(for [user (.keys users)]
                                   (.write dnix (+ "\t\""
                                                   recurse/dataset
                                                   "\" = \""
                                                   (+ (get homes user) "/" dname)
                                                   "\";\n")))

                              (.write dnix (+ "\t\""
                                              recurse/dataset
                                              "\" = \""
                                              recurse/mountpoint
                                              "\";\n"))))
                    (when (and pool (not (in recurse/real-dataset recurse/datasets)))
                          (zfs :m/subcommand clone-or-create
                               :o { "repeat-with-values" (.get ddict "options" []) }
                               snapshot-or-none
                               recurse/real-dataset)
                          (.snapshot zfs :r True (+ recurse/real-dataset "@blank"))
                          (.hold zfs :r True "blank" (+ recurse/real-dataset "@blank")))
                    (for [[key value] (.items (.get ddict d (D {  })))]
                         (recurse value key recurse/dataset mountpoint)))
              (for [[key value] (.items datasets)]
                   (recurse value key "${host}"))
              (.write dnix "}")))
      (when (or pool reserved-only)
            (let [pool-size-plus-metric (get (.get zpool :H True "size" host :m/list True :m/split True) 2)
                  pool-size             (-> pool-size-plus-metric
                                            (cut 0 -1)
                                            float
                                            (round 2))
                  pool-metric           (last pool-size-plus-metric)]
                 (defn pool-percentage-value [percentage]
                       (-> percentage
                           float
                           (/ 100)
                           (round 2)
                           str
                           (+ pool-metric)
                           return))
                 (.set zfs
                       (+ "refreservation=" (pool-percentage-value 15))
                       (+ host "/" reserved))

                 ;; Apparently, if python internal keywords exist in the argument, such as "set", etc.
                 ;; the command errors out; perhaps something to raise an issue of.
                 ;; This seems to work as an alternative.
                 ;; run(f"zfs set refreservation={pool_percentage_value(15)} {args.Pool}/{reserved}", shell = True)

                 (when (and (not reserved-only) swap)
                       (let [swoptions [ "com.sun:auto-snapshot=false"
                                         "compression=zle"
                                         "logbias=throughput"
                                         "primarycache=metadata"
                                         "secondarycache=none"
                                         "sync=standard" ]
                             page-size (getconf "PAGESIZE" :m/str True)]
                            (.create zfs
                                     :V (+ (str swap) "G")
                                     :b page-size
                                     :o { "repeat-with-values" swoptions }
                                     (+ host "/swap"))
                            (mkswap (+ "/dev/zvol" host "/swap")))))))
#+end_src

* Click

#+begin_src hy
(setv no-host-error-message "Sorry! The host needs to be set; do this with the main command while running the subcommand!")
(defn [ (.group click :no-args-is-help True)
        (.option click "-d" "--dazzle" :is-flag True)
        (.option click "-H" "--host")
        (.option click "-i" "--inspect" :is-flag True)
        (.option click "-P" "--print-run" :is-flag True :cls oreo.Option :xor [ "print" ])
        (.option click "-p" "--print" :is-flag True :cls oreo.Option :xor [ "print-run" ])
        (.option click "-r" "--resources-dir")
        click.pass-context ]
      strapper [ ctx dazzle host inspect print-run print resources-dir ]
               (when (!= (.geteuid os) 0)
                     (raise (SystemError "Sorry; this program needs to be run as root!")))
               (.ensure-object ctx dict)
               (if resources-dir
                   (setv ctx.obj.resources resources-dir)
                   (let [ cwd (.cwd Path)
                          nds "etc/nixos"
                          nd (Path "etc/nixos/")
                          eds (+ "/" nds)
                          ed (Path eds) ]
                        (setv ctx.obj.resources (/ cwd nd))
                        (if (.match ctx.obj.resources (+ "*" eds))
                            (setv ctx.obj.resources cwd)
                            (while (not (.exists ctx.obj.resources))
                                   (setv cwd cwd.parent
                                         ctx.obj.resources (/ cwd nd))
                                   (else (when (and (= ctx.obj.resources ed)
                                                    (.exists (setx mnt-dir (/ "/mnt" nd))))
                                               (setv ctx.obj.resources mnt-dir)))))))
               (setv ctx.obj.host host)
               (.bake-all- getconf :m/dazzle dazzle :m/print-command-and-run print-run :m/print-command print :m/debug inspect))
#+end_src

** Main

#+begin_src hy
(defn [ (.command strapper :no-args-is-help True
                           :context-settings { "ignore_unknown_options" True
                                               "allow_extra_args"       True })
        (.argument click "program-arguments" :nargs -1)
        (.option click "-a" "--all" :is-flag True)
        (.option click "-c" "--copy" :is-flag True)
        (.option click "-g" "--generate" :is-flag True)
        (.option click "-i" "--install" :is-flag True)
        (.option click "-b" "--install-bootloader" :is-flag True :cls oreo.Option :req-one-of [ "install" "all" ])
        (.option click "-r" "--replace" :is-flag True)
#+end_src

This can't use a default value, as that would trigger a rebuild all the time.

#+begin_src hy
        (.option click "-R" "--rebuild")
#+end_src

#+begin_src hy
        click.pass-context ]
      main [ ctx all copy generate install program-arguments rebuild replace install-bootloader ]
           (if ctx.obj.host
               (do (.bake-all- getconf :m/sudo True :m/run True)
                   (setv copy-partial (partial rsync :a True :v { "repeat" 2 } :c True :z { "repeat" 2 } f"{ctx.obj.resources}/"))
                   (if rebuild
                       (do (when copy (copy-partial "/etc/nixos/"))
                           (nixos-rebuild rebuild #* ctx.args :show-trace True))
                       (do (when (or copy all)
                                 (update-datasets ctx)
                                 (copy-partial "/mnt/etc/nixos/"))
                           (when (or generate all) (nixos-generate-config :root "/mnt"))
                           (when (or replace all)
                                 (if ctx.obj.host
                                     (do (sd "./hardware-configuration.nix"
                                             (+ "(import ./.).nixosConfigurations.${pkgs.stdenv.targetPlatform.system}.mini-" ctx.obj.host)
                                             "/mnt/etc/nixos/configuration.nix")
                                         (sd "'device = \"\"'"
                                             "'device = \"!\"'"
                                             "/mnt/etc/nixos/hardware-configuration.nix"))
                                     (raise (.UsageError click no-host-error-message))))
                           (when (or install all)
                                 (let [ options [
#+end_src

From [[https://github.com/NixOS/nix/issues/2293#issuecomment-405339738][here]], and documented [[https://nixos.org/manual/nix/stable/expressions/builtins.html#:~:text=The%20fetched%20tarball%20is%20cached%20for%20a%20certain%20amount%20of%20time%20(1%20hour%20by%20default)%20in%20~/.cache/nix/tarballs/.%20You%20can%20change%20the%20cache%20timeout%20either%20on%20the%20command%20line%20with%20%2D%2Dtarball%2Dttl%20number%2Dof%2Dseconds%20or%20in%20the%20Nix%20configuration%20file%20by%20adding%20the%20line%20tarball%2Dttl%20%3D%20number%2Dof%2Dseconds.][here]]:

#+begin_quote
The fetched tarball is cached for a certain amount of time (1 hour by default) in ~/.cache/nix/tarballs/.
You can change the cache timeout either on the command line with --tarball-ttl number-of-seconds
or in the Nix configuration file by adding the line tarball-ttl = number-of-seconds.
#+end_quote

Because I'm using the ~flakes nixosConfigurations~ output, I don't need this any more:

#+begin_src hy :tangle no
                                            "tarball-ttl 0"
#+end_src

Adapted from [[https://github.com/NixOS/nix/issues/807#issuecomment-209895935][here]]:

#+begin_src hy
                                            "build-fallback true"
#+end_src

#+begin_src hy
                                      ] ]
                                      (nixos-install #* ctx.args
#+end_src

Because I'm using the ~flakes nixosConfigurations~ output, I don't need this any more:

#+begin_src hy :tangle no
                                                 ;; :I (with [f (.open (+ ctx.obj.resources "/flake.lock"))]
                                                 ;;          #[f[nixpkgs=https://github.com/nixos/nixpkgs/archive/{(get (.load json f) "nodes" "22-11" "original" "ref")}.tar.gz]f])
                                                 :I #[f[nixpkgs={(.strip (.eval nix :impure True :expr "(import ./etc/nixos).inputs.nixpkgs.outPath" :m/run False) "\"")}]f]
#+end_src

#+begin_src hy
                                                 :m/run True
                                                 :show-trace True
                                                 :install-bootloader install-bootloader
                                                 :option { "repeat-with-values" options }))))))
               (raise (.UsageError click no-host-error-message))))
#+end_src

** Create

#+begin_src hy
(defn [ (.command strapper :no-args-is-help True)
        (.option click "-B" "--boot-device" :type #(str int))
        (.option click "-c" "--copies" :type int :default 1)
        (.option click "-d" "--deduplicated" :is-flag True)
        (.option click "-e" "--encrypted" :is-flag True)
        (.option click "-M" "--host-mountpoint" :help "Use the hostname as the mountpoint" :is-flag True :cls oreo.Option :xor [ "mountpoint" ])
        (.option click "-m" "--mountpoint" :cls oreo.Option :xor [ "host-mountpoint" ])
        (.option click "-o" "--pool-options" :multiple True)
        (.option click "-O" "--dataset-options" :multiple True)
        (.option click "-P"
                       "--partition"
                       :multiple True
                       :cls oreo.Option
                       :xor [ "raid" ]
                       :help "Set up an entire disk; a single `-P' sets up the boot partition with the size as the value passed in (with the unit, such as `2G' for 2 gibibytes),
a second `-P' sets up the swap space similarly, and subsequent invocations sets up further unformatted partitions.
The final partition will be the ZFS partition, and does not need to be specified.")
        (.option click "-p" "--pool-only" :is-flag True)
        (.option click "-r" "--raid" :cls oreo.Option :xor [ "partition" ])
        (.option click "-S" "--swap-device" :type #(str int))
        (.option click "-s" "--swap" :type int :default 0)
        (.option click "-z" "--zfs-devices" :required True :multiple True)
        click.pass-context ]
      create [ ctx boot-device copies deduplicated encrypted host-mountpoint mountpoint dataset-options pool-options partition pool-only raid swap-device swap zfs-devices ]
             (if ctx.obj.host
                 (try (if (= (input "THIS WILL DELETE ALL DATA ON THE SELECTED DEVICE / PARTITION! TO CONTINUE, TYPE IN 'ZFS CREATE'!\n\t") "ZFS CREATE")
                          (let [ dataset-options-dict (D { "xattr"      "sa"
                                                           "acltype"    "posixacl"
                                                           "mountpoint"  (if host-mountpoint
                                                                             (+ "/" ctx.obj.host)
                                                                             (or mountpoint "none"))
                                                           "compression" "zstd-19"
                                                           "checksum"    "edonr"
                                                           "atime"       "off"
                                                           "relatime"    "off"
                                                           "copies"      copies })
                                 pool-options-dict (D { "autotrim" "on"
                                                        "altroot" "/mnt"
                                                        "autoexpand" "on" })
                                 command (partial zpool.create :f True :m/run True)
                                 no-raid-error-message "Sorry! For multiple zfs devices a raid configuration must be provided using `-r / --raid'!"
                                 zfs-device (if (= (len zfs-devices) 1)
                                                (if raid
                                                    (raise (.UsageError click no-raid-error-message))
                                                    (get zfs-devices 0))
                                                (if raid
                                                    #[f[{raid} {(.join " " zfs-devices)}]f]
                                                    (raise (.UsageError click no-raid-error-message)))) ]
                               (when (or partition boot-device) (.bake- parted :m/sudo True :s True :a "optimal" "--"))
                               (when partition
                                     (setv zfs-name ctx.obj.host)
                                     (parted zfs-device "mklabel" "gpt")
                                     (for [[i p] (enumerate partition)]
                                          (parted zfs-device
                                                  "mkpart"
                                                  "primary"
                                                  (if i (get partition (dec i)) "0%")
                                                  p))
                                     (parted zfs-device "mkpart" "primary" (get partition -1) "100%")
                                     (parted zfs-device "name" (if (> (len partition) 1) 3 2) zfs-name))
                               (when (or partition boot-device)
                                     (if boot-device
                                         (let [ device (get boot-device 0)
                                                index  (get boot-device 1) ]
                                              (parted device "mkfs" index "fat32")
                                              (parted device "set" index "boot" "on")
                                              (parted device "set" index "esp" "on"))
                                         (do (parted zfs-device "name" 1 (+ ctx.obj.host "-boot"))
                                             (parted zfs-device "mkfs" 1 "fat32")
                                             (parted zfs-device "set" 1 "boot" "on")
                                             (parted zfs-device "set" 1 "esp" "on"))))
                               (when (or (> (len partition) 1) swap-device)
                                     (if swap-device
                                         (parted (get swap-device 0) "mkfs" (get swap-device 1) "linux-swap")
                                         (do (parted zfs-device "name" 2 (+ ctx.obj.host "-swap"))
                                             (parted zfs-device "mkfs" 2 "linux-swap"))))
                               (for [dataset (.list zfs :r True :H True :m/list True :m/split True)]
                                    (when (in ctx.obj.host dataset) (.export zpool :f True ctx.obj.host :m/ignore-stderr True)))
                               (when encrypted (setv dataset-options-dict.encryption "aes-256-gcm"
                                                     dataset-options-dict.keyformat  "passphrase"))
                               (when deduplicated (setv dataset-options-dict.dedup "edonr,verify"))
                               (when (.ismount os.path "/mnt") (umount :R True "/mnt"))
                               (.export zpool :f True ctx.obj.host :m/ignore-stderr True)
                               (.update dataset-options-dict (dfor item pool-options :setv kv (.split item "=") (get kv 0) (get kv 1)))
                               (.update pool-options-dict (dfor item dataset-options :setv kv (.split item "=") (get kv 0) (get kv 1)))
                               (command :O { "repeat-with-values" (gfor [k v] (.items dataset-options-dict) f"{k}={v}") }
                                        :o { "repeat-with-values" (gfor [k v] (.items pool-options-dict) f"{k}={v}") }
                                        ctx.obj.host
                                        (if partition (+ "/dev/disk/by-label/" zfs-name) zfs-device))
                               (update-datasets ctx :swap swap :encrypted encrypted :deduplicated deduplicated :pool True :reserved-only pool-only))
                          (print "Sorry; not continuing!\n\n"))
                      (finally (.export zpool :f True ctx.obj.host :m/ignore-stderr True)))
                 (raise (.UsageError click no-host-error-message))))
#+end_src

** Mount

#+begin_src hy
(defn [ (.command strapper :no-args-is-help True :name "mount")
        (.option click "-b" "--boot-device")
        (.option click "-d" "--deduplicated" :is-flag True)
        (.option click "-e" "--encrypted" :is-flag True)
        (.option click "-r" "--root-device")
        (.option click "-s" "--swap" :cls oreo.Option :xor [ "swap-device" ] :is-flag True)
        (.option click "-S" "--swap-device" :cls oreo.Option :xor [ "swap" ])
        (.option click "-i" "--install" :is-flag True)
        (.option click "-I" "--install-bootloader" :is-flag True)
        click.pass-context ]
      s/mount [ ctx boot-device deduplicated encrypted root-device swap swap-device install install-bootloader ]
            (if ctx.obj.host
                (do (update-datasets ctx :root-device root-device :encrypted encrypted :deduplicated deduplicated :swap swap)
                    (for [dataset (.list zfs :r True :H True :m/list True :m/split True)]
                         (when (in ctx.obj.host dataset) (break))
                         (else (.import zpool :f True ctx.obj.host)))
                    (when encrypted (.load-key zfs ctx.obj.host))
                    (try (.mkdir (Path "/mnt"))
                         (except [FileExistsError]
                                 (when (.ismount os.path "/mnt") (umount :R True "/mnt"))))
                    (if root-device
                        (mount root-device "/mnt")
                        (mount :t "zfs" (+ ctx.obj.host "/system/root") "/mnt"))
#+end_src

Taken from [[https://github.com/NixOS/nixpkgs/issues/73404#issuecomment-1011485428][here]]:

#+begin_src hy
                    (try (.mkdir (Path "/mnt/mnt"))
                         (except [FileExistsError]
                                 (when (.ismount os.path "/mnt/mnt") (umount :R True "/mnt/mnt"))))
                    (mount :bind True "/mnt" "/mnt/mnt")
#+end_src

#+begin_src hy
                    (.mkdir (Path "/mnt/etc/nixos") :parents True :exist-ok True)

                    (.mkdir (Path "/mnt/nix") :parents True :exist-ok True)
                    (mount :t "zfs" (+ ctx.obj.host "/system/nix") "/mnt/nix")

                    (.mkdir (Path "/mnt/persist") :parents True :exist-ok True)
                    (mount :t "zfs" (+ ctx.obj.host "/system/persist") "/mnt/persist")

                    (when boot-device
                          (let [boot "/mnt/boot/efi"]
                               (.mkdir (Path boot) :parents True :exist-ok True)
                               (mount boot-device boot)))
                    (when swap (swapon (+ "/dev/zvol/" ctx.obj.host "/swap" :m/run True)))
                    (when swap-device (swapon swap-device :m/run True))

                    (.mkdir (Path "/tmp") :parents True :exist-ok True)
                    (mount :t "zfs" (+ ctx.obj.host "/system/tmp") "/tmp" :m/run True)

                    (.mkdir (Path "/tmp/nix") :parents True :exist-ok True)
                    (mount :t "zfs" (+ ctx.obj.host "/system/tmp/nix") "/tmp/nix" :m/run True)

                    ;; (rsync :a True :v { "repeat" 2 } :c True :z { "repeat" 2 } :delete True "/nix/" "/tmp/nix/")
                    ;; (mount :t "zfs" (+ ctx.obj.host "/system/tmp/nix") "/nix" :m/run True)

                    (when (or install install-bootloader) (.invoke ctx main :all True :install-bootloader install-bootloader)))
                (raise (.UsageError click no-host-error-message))))
#+end_src

** Update

#+begin_src hy
(defn [ (.command strapper)
        (.option click "-d" "--deduplicated" :is-flag True)
        (.option click "-e" "--encrypted" :is-flag True)
        (.option click "-f" "--files" :is-flag True :help "Update datasets.nix with any new datasets; the default")
        (.option click "-p" "--pool" :is-flag True :help "Update the pool and datasets.nix with any new datasets")
        (.option click "-r" "--root-device")
        (.option click "-s" "--swap" :type int :default 0)
        click.pass-context ]
      update [ ctx deduplicated encrypted files pool root-device swap ]
             (if ctx.obj.host
                 (try (setv ud (partial update-datasets ctx :swap swap :encrypted encrypted :deduplicated deduplicated :root-device root-device))
                      (cond files (ud)
                            pool (ud :pool True)
                            True (ud))
                      (finally (.export zpool :f True ctx.obj.host :m/ignore-stderr True)))
                 (raise (.UsageError click no-host-error-message))))
#+end_src